#nullable enable

using System;


namespace Algorithms
{
    public class Program
    {
        static void Main()
        {
            var bst = new BST("as", "ds");
            bst.Put("a", "aa");
            bst.Put("b", "bb");

            Console.WriteLine(bst.Get("a"));
            Console.WriteLine(bst.Get("b"));
            Console.WriteLine(bst.DeleteMin() == null);
        }


        public class BST
        {
            Node root;

            public BST()
            {
            }

            public BST(Node root)
            {
                this.root = root;
            }

            public BST(string key, string value)
            {
                root = new Node(key, value);
            }

            public string? Get(string key)
            {
                if (key == null) throw new ArgumentNullException(nameof(key), "");
                return Get(root, key);
            }

            public string? Get(Node? currentRoot, string key)
            {
                if (currentRoot == null) return null;

                int cmp = key.CompareTo(currentRoot.key);
                if (cmp > 0) return Get(currentRoot.RightChild, key);
                if (cmp < 0) return Get(currentRoot.LeftChild, key);
                if (cmp == 0) return currentRoot.value;
                return null;
            }

            public void Put(string key, string value)
            {
                if (key == null) throw new ArgumentNullException(nameof(key), "");
                root = Put(root, new Node(key, value));
            }


            public Node Put(Node? currentRoot, Node nodeToAdd)
            {
                if (currentRoot == null) currentRoot = nodeToAdd;
                int cmp = nodeToAdd.key.CompareTo(currentRoot.key);
                if (cmp > 0) currentRoot.RightChild = Put(currentRoot.RightChild, nodeToAdd);
                else if (cmp < 0) currentRoot.LeftChild = Put(currentRoot.LeftChild, nodeToAdd);
                else currentRoot.value = nodeToAdd.value;
                return currentRoot;
            }

            public Node DeleteMin()
            {
                return DeleteMin(root);
            }

            public Node? DeleteMin(Node CurrentRoot)
            {
                while (true)
                {
                    if (CurrentRoot != null)
                    {
                        CurrentRoot.LeftChild = DeleteMin(CurrentRoot.LeftChild);
                    }
                    else
                    {
                        return null;
                    }
                }
            }

        public class Node
            {
                public string key;
                public string value;

                public Node(string key, string value)
                {
                    this.key = key;
                    this.value = value;
                }

                public Node? LeftChild, RightChild;
            }
        }
    }
}
