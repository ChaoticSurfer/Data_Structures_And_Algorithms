#nullable enable

using System;


namespace Algorithms
{
    public class Program
    {
        static void Main()
        {
            var bst = new BST("bb", "bbbb");
            bst.Put("aa", "aaaa");
            bst.Put("cc", "cccc");

            //
            Console.WriteLine(bst.DeleteMin().value);
            Console.WriteLine(bst.DeleteMin().value);
        }


        public class BST
        {
            Node root;

            public BST()
            {
            }

            public BST(Node root)
            {
                this.root = root;
            }

            public BST(string key, string value)
            {
                root = new Node(key, value);
            }

            public string? Get(string key)
            {
                if (key == null) throw new ArgumentNullException(nameof(key), "");
                return Get(root, key);
            }

            public string? Get(Node? currentRoot, string key)
            {
                if (currentRoot == null) return null;

                int cmp = key.CompareTo(currentRoot.key);
                if (cmp > 0) return Get(currentRoot.RightChild, key);
                if (cmp < 0) return Get(currentRoot.LeftChild, key);
                if (cmp == 0) return currentRoot.value;
                return null;
            }

            public void Put(string key, string value)
            {
                if (key == null) throw new ArgumentNullException(nameof(key), "");
                root = Put(root, new Node(key, value));
            }


            public Node Put(Node? currentRoot, Node nodeToAdd)
            {
                if (currentRoot == null) currentRoot = nodeToAdd;
                currentRoot.size += 1;
                int cmp = nodeToAdd.key.CompareTo(currentRoot.key);
                if (cmp > 0) currentRoot.RightChild = Put(currentRoot.RightChild, nodeToAdd);
                else if (cmp < 0) currentRoot.LeftChild = Put(currentRoot.LeftChild, nodeToAdd);
                else
                {
                    currentRoot.value = nodeToAdd.value;
                    currentRoot.size--;
                }

                return currentRoot;
            }

            public Node DeleteMin()
            {
                return DeleteMin(root);
            }

            private Node DeleteMin(Node x)
            {
                if (x.LeftChild == null) return x.RightChild;
                x.LeftChild = DeleteMin(x.LeftChild);
                x.size =
                    (x.LeftChild == null ? 0 : Size(x.LeftChild))
                    + (x.RightChild == null ? 0 : Size(x.RightChild))
                    + 1;
                return x;
            }


            public Node Delete(string key)
            {
                return Delete(root, key);
            }

            public Node Delete(Node x, string key)
            {
                int cmp = key.CompareTo(x.key);
                if (cmp > 0) return Delete(x.RightChild, key);
                if (cmp < 0) return Delete(x.LeftChild, key);

                if (x.LeftChild == null)
                {
                    return x.RightChild;
                }
                if (x.RightChild == null)
                {
                    return x.LeftChild;
                }

                Node leftSubtree = x.LeftChild;
                Node newX =  DeleteMin(x.RightChild);
                newX.LeftChild = leftSubtree;
                return newX;

            }


            public static int Size(Node node)
            {
                return node.size;
            }

            public class Node
            {
                public string key;
                public string value;

                public Node(string key, string value)
                {
                    this.key = key;
                    this.value = value;
                    size = 1;
                }

                public int size;
                public Node? LeftChild, RightChild;
            }
        }
    }
}
