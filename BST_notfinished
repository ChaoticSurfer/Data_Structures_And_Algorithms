#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;


namespace Algorithms
{
    public class Program
    {
        static void Main()
        {
            var bst = new BST("bb", "bbbb");
            bst.Put("dd", "dddd");
            bst.Put("aa", "aaaa");
            bst.Put("cc", "cccc");
            bst.Put("gg", "gggg");

            foreach (var node in bst.InorderTraversal())
            {
                Console.WriteLine($"{node.key} {node.value} {node.size}");
            }         
            
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
            foreach (var node in bst.BreadthFirstTraversal())
            {
                Console.WriteLine($"{node.key} {node.value} {node.size}");
            }
        }

        public class BST
        {
            Node root;

            public BST()
            {
            }

            public BST(Node root)
            {
                this.root = root;
            }

            public BST(string key, string value)
            {
                root = new Node(key, value);
            }


            public string min()
            {
                // if (isEmpty()) throw new NoSuchElementException("calls min() with empty symbol table");
                return min(root).key;
            }

            private Node min(Node x)
            {
                if (x.LeftChild == null) return x;
                return min(x.LeftChild);
            }

            public string max()
            {
                // if (isEmpty()) throw new NoSuchElementException("calls max() with empty symbol table");
                return max(root).key;
            }

            private Node max(Node x)
            {
                if (x.RightChild == null) return x;
                return max(x.RightChild);
            }

            public string? Get(string key)
            {
                if (key == null) throw new ArgumentNullException(nameof(key), "");
                return Get(root, key);
            }

            public string? Get(Node? currentRoot, string key)
            {
                if (currentRoot == null) return null;

                int cmp = key.CompareTo(currentRoot.key);
                if (cmp > 0) return Get(currentRoot.RightChild, key);
                if (cmp < 0) return Get(currentRoot.LeftChild, key);
                if (cmp == 0) return currentRoot.value;
                return null;
            }

            public void Put(string key, string value)
            {
                if (key == null) throw new ArgumentNullException(nameof(key), "");
                if (value == null)
                    Delete(key);
                else
                    root = Put(root, new Node(key, value));
            }


            public Node Put(Node? currentRoot, Node nodeToAdd)
            {
                if (currentRoot == null) currentRoot = nodeToAdd;
                currentRoot.size += 1;
                int cmp = nodeToAdd.key.CompareTo(currentRoot.key);
                if (cmp > 0) currentRoot.RightChild = Put(currentRoot.RightChild, nodeToAdd);
                else if (cmp < 0) currentRoot.LeftChild = Put(currentRoot.LeftChild, nodeToAdd);
                else
                {
                    currentRoot.value = nodeToAdd.value;
                    currentRoot.size--;
                }

                return currentRoot;
            }

            public void DeleteMin()
            {
                root = DeleteMin(root);
            }

            private Node DeleteMin(Node x)
            {
                if (x.LeftChild == null) return x.RightChild;
                x.LeftChild = DeleteMin(x.LeftChild);
                x.size =
                    (x.LeftChild == null ? 0 : Size(x.LeftChild))
                    + (x.RightChild == null ? 0 : Size(x.RightChild))
                    + 1;
                return x;
            }


            public Node Delete(string key)
            {
                return Delete(root, key);
            }

            public Node Delete(Node x, string key)
            {
                int cmp = key.CompareTo(x.key);
                if (cmp > 0) x.RightChild = Delete(x.RightChild, key);
                if (cmp < 0) x.LeftChild = Delete(x.LeftChild, key);
                else
                {
                    if (x.LeftChild == null) return x.RightChild;
                    if (x.RightChild == null) return x.LeftChild;

                    Node t = x;
                    x = min(t.RightChild);
                    t.RightChild = DeleteMin(t.RightChild);
                    x.LeftChild = t.LeftChild;
                }

                // size
                x.size =
                    (x.LeftChild == null ? 0 : Size(x.LeftChild))
                    + (x.RightChild == null ? 0 : Size(x.RightChild))
                    + 1;
                return x;
            }


            public static int Size(Node node)
            {
                return node.size;
            }


            public Queue<Node> InorderTraversal()
            {
                var queue = new Queue<Node>();
                InorderTraversal(root, queue);
                return queue;
            }

            private void InorderTraversal(Node x, Queue<Node> queue)
            {
                if (x == null)
                    return;

                InorderTraversal(x.LeftChild, queue);
                queue.Enqueue(x);
                InorderTraversal(x.RightChild, queue);
            }

            public Queue<Node> BreadthFirstTraversal()
            {
                var queue = new Queue<Node>();
                BreadthFirstTraversal(root, queue);
                return queue;
            }
            
            private void BreadthFirstTraversal(Node x, Queue<Node> queue)
            {
                if (x == null)
                    return;
                queue.Enqueue(x);
                InorderTraversal(x.LeftChild, queue);
                InorderTraversal(x.RightChild, queue);
            }

            public class Node
            {
                public string key;
                public string value;

                public Node(string key, string value)
                {
                    this.key = key;
                    this.value = value;
                    size = 1;
                }

                public int size;
                public Node? LeftChild, RightChild;
            }
        }
    }
}
