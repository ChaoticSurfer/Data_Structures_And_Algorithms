using System;
using System.Collections;
using System.Collections.Generic;

// time complexity
// get -> O(1)
// put -> O(1) if not a duplicate
// if duplicate key O(n) ,because we have to find it to remove 


namespace LRUDataStrcture
{
    public class LRU<Key, Value> :IEnumerable<KeyValuePair<Key, Value>>
    {
        public LRU(int capacity)
        {
            Capacity = capacity;
            Cache = new Dictionary<Key, Value>();
            _linkedList = new LinkedList<Key>();
        }

        public void Put(Key key, Value value)
        {
            Cache[key] = value;


            if (Cache.ContainsKey(key))
            {
                var containedNode = _linkedList.Find(key);
                _linkedList.Remove(containedNode);
            } // if already contained remove it


            if (_linkedList.Count == Capacity)
            {
                _linkedList.RemoveFirst(); // if  full remove first
                Cache.Remove(key);
            }

            _linkedList.AddLast(key); // and add at the end
        }

        public bool Contains(Key key) => Cache.ContainsKey(key);

        public Value Get(Key key)
        {
            Value value;

            var contains = Cache.TryGetValue(key, out value);
            if (contains == false) throw new Exception();

            return value;
        }


        private Dictionary<Key, Value> Cache;
        public int Capacity;
        private LinkedList<Key> _linkedList;


        public IEnumerator<KeyValuePair<Key, Value>> GetEnumerator()
        {
            return Cache.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return Cache.GetEnumerator();
        }
    }
}
