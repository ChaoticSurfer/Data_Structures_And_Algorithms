// C# implementation of ShellSort

using System;

static class Program
{
    // Driver method
    public static void Main()
    {
        int[] arr = {12, 34, 54, 2, 3};
        printArray(arr);

        Quick.Sort(arr, 0, arr.Length - 1);
        printArray(arr);
    }

    public static void printArray(int[] arr)
    {
        int n = arr.Length;
        for (int i = 0; i < n; ++i)
            Console.Write(arr[i] + " ");
        Console.WriteLine();
    }
}


public static class Quick
{
    public static void Sort(int[] arr, int low, int high)
    {
        if (low >= high)
        {
            return;
        }

        int k = Partition(arr, low, high);
        Sort(arr, low, k - 1);
        Sort(arr, k + 1, high);
    }


    public static int Partition<T>(T[] array, int lo, int hi) where T : IComparable
    {
        int k = lo;
        int i, j;
        i = lo;
        j = hi + 1;

        while (true)
        {
            while (less(array[++i], array[k]))
                if (i == hi)
                    break;

            while (less(array[k], array[--j]))
                if (j == lo)
                    break;

            if (i > j)
            {
                break;
            }

            Swap(array, lo, hi);
        }

        Swap(array, lo, k);
        return lo;
    }

    public static void Swap<T>(T[] arr, int i, int j)
    {
        T temp;
        temp = arr[j];
        arr[j] = arr[i];
        arr[i] = temp;
    }

    public static bool less<T>(T comparable1, T comparable2) where T : IComparable
    {
        return comparable1.CompareTo(comparable2) == -1;
    }
}
